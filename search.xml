<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LeetCode_771-宝石与石头</title>
      <link href="/2023/03/29/7870dad5b771/"/>
      <url>/2023/03/29/7870dad5b771/</url>
      
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode.cn/problems/jewels-and-stones/">LeetCode_771-宝石与石头</a></p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p>字符串，哈希表</p><h2 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h2><p>给你一个字符串 jewels 代表石头中宝石的类型，另有一个字符串 stones 代表你拥有的石头。 stones 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。</p><p>字母区分大小写，因此 “a” 和 “A” 是不同类型的石头。</p><ul><li><code>jewels</code> 中的所有字符都是 <strong>唯一的</strong></li></ul><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：jewels = <span class="string">&quot;aA&quot;</span>, stones = <span class="string">&quot;aAAbbbb&quot;</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">    </span><br><span class="line">输入：jewels = <span class="string">&quot;z&quot;</span>, stones = <span class="string">&quot;ZZ&quot;</span></span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numJewelsInStones</span><span class="params">(String jewels, String stones)</span> &#123;</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; jewels.length(); i++) &#123;</span><br><span class="line">            set.add(jewels.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; stones.length(); j++) &#123;</span><br><span class="line">            <span class="comment">//需要注意的是Set中判断是否存在key用contains(), 不是containsKey()</span></span><br><span class="line">            <span class="keyword">if</span>(set.contains(stones.charAt(j))) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode_709-转换成小写字母</title>
      <link href="/2023/03/29/8ab92c6f780d/"/>
      <url>/2023/03/29/8ab92c6f780d/</url>
      
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode.cn/problems/to-lower-case/">LeetCode_709-转换成小写字母</a></p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p>字符串</p><h2 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h2><p>给你一个字符串 <code>s</code> ，将该字符串中的大写字母转换成相同的小写字母，返回新的字符串。</p><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">输出：<span class="string">&quot;hello&quot;</span></span><br><span class="line">    </span><br><span class="line">输入：s = <span class="string">&quot;here&quot;</span></span><br><span class="line">输出：<span class="string">&quot;here&quot;</span></span><br><span class="line">    </span><br><span class="line">输入：s = <span class="string">&quot;LOVELY&quot;</span></span><br><span class="line">输出：<span class="string">&quot;lovely&quot;</span></span><br></pre></td></tr></table></figure><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toLowerCase</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">//方法一（一个个字符判断）</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(ch &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">//先将字符ch转换为整型计算ASCII码，再转换为字符型输出字符</span></span><br><span class="line">                <span class="comment">//A~Z的ASCII码为65~90，字符a~z的ASCII码为97~122，</span></span><br><span class="line">                <span class="comment">//每个大小写字符的ASCII码都相差32,因此用大写字符的ASCII码 加上32即可得到该字符的小写形式</span></span><br><span class="line">                ch = (<span class="type">char</span>) (ch + <span class="number">32</span>);</span><br><span class="line">                ans.append(ch);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ans.append(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法二（调用函数）</span></span><br><span class="line">        <span class="comment">//仅需一行代码 //toUpperCase()为将小写字符串转变为大写字符串</span></span><br><span class="line">        <span class="keyword">return</span> s.toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode_657-机器人能否返回原点</title>
      <link href="/2023/03/29/25ac54a4a790/"/>
      <url>/2023/03/29/25ac54a4a790/</url>
      
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode.cn/problems/robot-return-to-origin/">LeetCode_657-机器人能否返回原点</a></p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p>字符串</p><h2 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h2><p>在二维平面上，有一个机器人从原点 (0, 0) 开始。给出它的移动顺序，判断这个机器人在完成移动后是否在 (0, 0) 处结束。</p><p>移动顺序由字符串 moves 表示。字符 move[i] 表示其第 i 次移动。机器人的有效动作有 R（右），L（左），U（上）和 D（下）。</p><p>如果机器人在完成所有动作后返回原点，则返回 true。否则，返回 false。</p><p><strong>注意：机器人“面朝”的方向无关紧要。</strong> “R” 将始终使机器人向右移动一次，“L” 将始终向左移动等。此外，假设每次移动机器人的移动幅度相同。</p><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: moves = <span class="string">&quot;UD&quot;</span></span><br><span class="line">输出: <span class="literal">true</span></span><br><span class="line">解释：机器人向上移动一次，然后向下移动一次。所有动作都具有相同的幅度，因此它最终回到它开始的原点。因此，我们返回 <span class="literal">true</span>。</span><br><span class="line"></span><br><span class="line">输入: moves = <span class="string">&quot;LL&quot;</span></span><br><span class="line">输出: <span class="literal">false</span></span><br><span class="line">解释：机器人向左移动两次。它最终位于原点的左侧，距原点有两次 “移动” 的距离。我们返回 <span class="literal">false</span>，因为它在移动结束时没有返回原点。</span><br></pre></td></tr></table></figure><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">judgeCircle</span><span class="params">(String moves)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; moves.length(); k++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> moves.charAt(k);</span><br><span class="line">            <span class="comment">//**注意：机器人“面朝”的方向无关紧要**</span></span><br><span class="line">            <span class="comment">//没什么好说的</span></span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">&#x27;L&#x27;</span>) l++;</span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">&#x27;R&#x27;</span>) r++;</span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">&#x27;U&#x27;</span>) u++;</span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">&#x27;D&#x27;</span>) d++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l == r &amp;&amp; u == d) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode_242-有效的字母异位词</title>
      <link href="/2023/03/29/34a2e1c85f37/"/>
      <url>/2023/03/29/34a2e1c85f37/</url>
      
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode.cn/problems/valid-anagram/">LeetCode_242-有效的字母异位词</a></p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p>字符串, 哈希表，位运算</p><h2 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h2><p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</p><p>注意：若 s 和 t 中每个字符出现的次数都相同，则称 s 和 t 互为字母异位词。</p><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: s = <span class="string">&quot;anagram&quot;</span>, t = <span class="string">&quot;nagaram&quot;</span></span><br><span class="line">输出: <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">输入: s = <span class="string">&quot;rat&quot;</span>, t = <span class="string">&quot;car&quot;</span></span><br><span class="line">输出: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="comment">//方法一（哈希表）</span></span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            map.put(ch, map.containsKey(ch)? map.get(ch)+<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; t.length(); j++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> t.charAt(j);</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(ch)) &#123;</span><br><span class="line">                map.put(ch, map.get(ch)-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(ch, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> key : map.keySet()) &#123;</span><br><span class="line">            <span class="comment">//必须设置为大于一，这样才行</span></span><br><span class="line">            <span class="keyword">if</span>(map.get(key) &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二：（同时也是官方解法）"><a href="#方法二：（同时也是官方解法）" class="headerlink" title="方法二：（同时也是官方解法）"></a>方法二：（同时也是官方解法）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123; </span><br><span class="line">        <span class="comment">//方法二（先排序，用equal比较）</span></span><br><span class="line">        <span class="keyword">if</span>(s.length() != t.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] s1 = s.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] t1 = t.toCharArray();</span><br><span class="line">        Arrays.sort(s1);</span><br><span class="line">        Arrays.sort(t1);</span><br><span class="line">        <span class="keyword">return</span> Arrays.equals(s1, t1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="comment">//方法三（先排序，用位运算【相当与方法二的复杂(多余)化】）</span></span><br><span class="line">        <span class="keyword">if</span>(s.length() != t.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] s1 = s.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] t1 = t.toCharArray();</span><br><span class="line">        Arrays.sort(s1);</span><br><span class="line">        Arrays.sort(t1);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s1.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ss</span> <span class="operator">=</span> s1[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tt</span> <span class="operator">=</span> t1[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="comment">//(ss ^ tt)必须用括号括起来，这个是优先级问题</span></span><br><span class="line">            <span class="comment">//如果不括起来，执行时就是相当于这样子的运算顺序ss ^ （tt != 0）</span></span><br><span class="line">            <span class="keyword">if</span>((ss ^ tt) != <span class="number">0</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>简洁的哈希表解法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="comment">//长度不等肯定不对</span></span><br><span class="line">        <span class="keyword">if</span>(s.length() != t.length())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span>[] alpha = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; s.length(); i++) &#123;</span><br><span class="line">            alpha[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>] ++;</span><br><span class="line">            alpha[t.charAt(i) - <span class="string">&#x27;a&#x27;</span>] --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(alpha[i] != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode_804-唯一摩尔斯密码词</title>
      <link href="/2023/03/29/76ec1b507256/"/>
      <url>/2023/03/29/76ec1b507256/</url>
      
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode.cn/problems/unique-morse-code-words/">LeetCode_804-唯一摩尔斯密码词</a></p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p>字符串， 哈希表</p><h2 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h2><p>国际摩尔斯密码定义一种标准编码方式，将每个字母对应于一个由一系列点和短线组成的字符串， 比如:</p><p>‘a’ 对应 “.-“ ，<br>‘b’ 对应 “-…” ，<br>‘c’ 对应 “-.-.” ，以此类推。<br>为了方便，所有 26 个英文字母的摩尔斯密码表如下：</p><p>[“.-“,”-…”,”-.-.”,”-..”,”.”,”..-.”,”–.”,”….”,”..”,”.—“,”-.-“,”.-..”,”–”,”-.”,”—“,”.–.”,”–.-“,”.-.”,”…”,”-“,”..-“,”…-“,”.–”,”-..-“,”-.–”,”–..”]<br>给你一个字符串数组 words ，每个单词可以写成每个字母对应摩尔斯密码的组合。</p><p>例如，”cab” 可以写成 “-.-..–…” ，(即 “-.-.” + “.-“ + “-…” 字符串的结合)。我们将这样一个连接过程称作 单词翻译 。<br>对 words 中所有单词进行单词翻译，返回不同 单词翻译 的数量。</p><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: words = [<span class="string">&quot;gin&quot;</span>, <span class="string">&quot;zen&quot;</span>, <span class="string">&quot;gig&quot;</span>, <span class="string">&quot;msg&quot;</span>]</span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line">解释: </span><br><span class="line">各单词翻译如下:</span><br><span class="line"><span class="string">&quot;gin&quot;</span> -&gt; <span class="string">&quot;--...-.&quot;</span></span><br><span class="line"><span class="string">&quot;zen&quot;</span> -&gt; <span class="string">&quot;--...-.&quot;</span></span><br><span class="line"><span class="string">&quot;gig&quot;</span> -&gt; <span class="string">&quot;--...--.&quot;</span></span><br><span class="line"><span class="string">&quot;msg&quot;</span> -&gt; <span class="string">&quot;--...--.&quot;</span></span><br><span class="line"></span><br><span class="line">共有 <span class="number">2</span> 种不同翻译, <span class="string">&quot;--...-.&quot;</span> 和 <span class="string">&quot;--...--.&quot;</span>.</span><br><span class="line"></span><br><span class="line">输入：words = [<span class="string">&quot;a&quot;</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniqueMorseRepresentations</span><span class="params">(String[] words)</span> &#123;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String word : words) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> word.length();</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">                ans.append(Morse[ch - <span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            set.add(ans.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> set.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String Morse[] = &#123;<span class="string">&quot;.-&quot;</span>,<span class="string">&quot;-...&quot;</span>,<span class="string">&quot;-.-.&quot;</span>,<span class="string">&quot;-..&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;..-.&quot;</span>,<span class="string">&quot;--.&quot;</span>,<span class="string">&quot;....&quot;</span>,<span class="string">&quot;..&quot;</span>,<span class="string">&quot;.---&quot;</span>,<span class="string">&quot;-.-&quot;</span>,<span class="string">&quot;.-..&quot;</span>,<span class="string">&quot;--&quot;</span>,<span class="string">&quot;-.&quot;</span>,<span class="string">&quot;---&quot;</span>,<span class="string">&quot;.--.&quot;</span>,<span class="string">&quot;--.-&quot;</span>,<span class="string">&quot;.-.&quot;</span>,<span class="string">&quot;...&quot;</span>,<span class="string">&quot;-&quot;</span>,<span class="string">&quot;..-&quot;</span>,<span class="string">&quot;...-&quot;</span>,<span class="string">&quot;.--&quot;</span>,<span class="string">&quot;-..-&quot;</span>,<span class="string">&quot;-.--&quot;</span>,<span class="string">&quot;--..&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode_525-检测大写字母</title>
      <link href="/2023/03/29/7c403eebe015/"/>
      <url>/2023/03/29/7c403eebe015/</url>
      
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode.cn/problems/detect-capital/">LeetCode_525-检测大写字母</a></p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p>字符串</p><h2 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h2><p>我们定义，在以下情况时，单词的大写用法是正确的：</p><ul><li>​    全部字母都是大写，比如 “USA” 。</li><li>​    单词中所有字母都不是大写，比如 “leetcode” 。</li><li>​    如果单词不只含有一个字母，只有首字母大写， 比如 “Google” 。</li></ul><p>给你一个字符串 word 。如果大写用法正确，返回 true ；否则，返回 false 。</p><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：word = <span class="string">&quot;USA&quot;</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">    </span><br><span class="line">输入：word = <span class="string">&quot;FlaG&quot;</span></span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">detectCapitalUse</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> word.length();</span><br><span class="line">        <span class="comment">//统计大写字母个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//首字母</span></span><br><span class="line">        <span class="type">Character</span> <span class="variable">flag</span> <span class="operator">=</span> word.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="type">Character</span> <span class="variable">ch</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(ch &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当大写字母个数等于字符串长度，或者大写字母个数不存在（即全为小写字母）时，返回true</span></span><br><span class="line">        <span class="keyword">if</span>(count == len || count == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//如果大写字母个数为1， 则必须要同时满足flag为大写字母才行</span></span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">1</span> &amp;&amp; (flag &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; flag &lt;= <span class="string">&#x27;Z&#x27;</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//其他情况返回false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode_415-字符串相加</title>
      <link href="/2023/03/29/3370c052b901/"/>
      <url>/2023/03/29/3370c052b901/</url>
      
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode.cn/problems/add-strings/">LeetCode_415-字符串相加</a></p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p>字符串</p><h2 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h2><p>给定两个字符串形式的非负整数 num1 和num2 ，计算它们的和并同样以字符串形式返回。</p><p>你不能使用任何內建的用于处理大整数的库（比如 BigInteger）， 也不能直接将输入的字符串转换为整数形式。</p><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：num1 = <span class="string">&quot;11&quot;</span>, num2 = <span class="string">&quot;123&quot;</span></span><br><span class="line">输出：<span class="string">&quot;134&quot;</span></span><br><span class="line">    </span><br><span class="line">输入：num1 = <span class="string">&quot;456&quot;</span>, num2 = <span class="string">&quot;77&quot;</span></span><br><span class="line">输出：<span class="string">&quot;533&quot;</span></span><br></pre></td></tr></table></figure><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addStrings</span><span class="params">(String num1, String num2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> num1.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> num2.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span> || add != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//两个数字位数不同怎么处理，这里我们统一在指针当前下标处于负数的时候返回0</span></span><br><span class="line">            <span class="comment">//等价于对位数较短的数字进行了补零操作，这样就可以除去两个数字位数不同情况的处理</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> i &gt;= <span class="number">0</span>? num1.charAt(i) - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> j &gt;= <span class="number">0</span>? num2.charAt(j) - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> x + y + add;</span><br><span class="line">            ans.append(sum % <span class="number">10</span>);</span><br><span class="line">            add = sum / <span class="number">10</span>;</span><br><span class="line">            i--;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.reverse();</span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode_521-最长特殊序列Ⅰ</title>
      <link href="/2023/03/29/2fc927ffcb4b/"/>
      <url>/2023/03/29/2fc927ffcb4b/</url>
      
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode.cn/problems/longest-uncommon-subsequence-i/">LeetCode_521-最长特殊序列Ⅰ</a></p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p>字符串</p><h2 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h2><p>给你两个字符串 a 和 b，请返回 这两个字符串中 最长的特殊序列  的长度。如果不存在，则返回 -1 。</p><p>「最长特殊序列」 定义如下：该序列为 某字符串独有的最长子序列（即不能是其他字符串的子序列） 。</p><p>字符串 s 的子序列是在从 s 中删除任意数量的字符后可以获得的字符串。</p><p>例如，”abc” 是 “aebdc” 的子序列，因为删除 “aebdc” 中斜体加粗的字符可以得到 “abc” 。 “aebdc” 的子序列还包括 “aebdc” 、 “aeb” 和 “” (空字符串)。</p><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: a = <span class="string">&quot;aba&quot;</span>, b = <span class="string">&quot;cdc&quot;</span></span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释: 最长特殊序列可为 <span class="string">&quot;aba&quot;</span> (或 <span class="string">&quot;cdc&quot;</span>)，两者均为自身的子序列且不是对方的子序列。</span><br><span class="line"></span><br><span class="line">输入：a = <span class="string">&quot;aaa&quot;</span>, b = <span class="string">&quot;bbb&quot;</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释: 最长特殊序列是 <span class="string">&quot;aaa&quot;</span> 和 <span class="string">&quot;bbb&quot;</span> 。</span><br><span class="line">   </span><br><span class="line">输入：a = <span class="string">&quot;aaa&quot;</span>, b = <span class="string">&quot;aaa&quot;</span></span><br><span class="line">输出：-<span class="number">1</span></span><br><span class="line">解释: 字符串 a 的每个子序列也是字符串 b 的每个子序列。同样，字符串 b 的每个子序列也是字符串 a 的子序列。</span><br></pre></td></tr></table></figure><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findLUSlength</span><span class="params">(String a, String b)</span> &#123;</span><br><span class="line">        <span class="comment">//s1 = &#x27;ab&#x27;,s2 = &#x27;a&#x27;,因为ab是s1独有，所以最长子序列为ab，</span></span><br><span class="line">        <span class="comment">//s1 = &#x27;ab&#x27;, s2 = &#x27;ab&#x27;, 因为ab是两个串都有，ab排除，a也是两个串都有，排除，b也是两个串都有，排除。</span></span><br><span class="line">        <span class="comment">//所以最长特殊序列不存在，返回-1</span></span><br><span class="line">        <span class="comment">//通过以上分析，我们可以得出结论，如果：两个串相等（不仅长度相等，内容也相等），那么他们的最长特殊序列不存在。返回-1</span></span><br><span class="line">        <span class="comment">//如果两个串长度不一样，那么长的串 永远也不可能是 短串的子序列，</span></span><br><span class="line">        <span class="comment">//即len(s1) &gt; len(s2),则最长特殊序列为s1,返回长度大的数 </span></span><br><span class="line">        <span class="keyword">return</span> !a.equals(b) ? Math.max(a.length(), b.length()) : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode_929-独特的电子邮件地址</title>
      <link href="/2023/03/29/880149c0df5f/"/>
      <url>/2023/03/29/880149c0df5f/</url>
      
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode.cn/problems/unique-email-addresses/">LeetCode_929-独特的电子邮件地址</a></p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p>哈希表， 字符串</p><h2 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h2><p>每个 有效电子邮件地址 都由一个 本地名 和一个 域名 组成，以 ‘@’ 符号分隔。除小写字母之外，电子邮件地址还可以含有一个或多个 ‘.’ 或 ‘+’ 。</p><p>例如，在 <a href="mailto:&#x61;&#x6c;&#105;&#x63;&#101;&#x40;&#x6c;&#101;&#101;&#x74;&#x63;&#x6f;&#100;&#x65;&#46;&#99;&#x6f;&#x6d;">&#x61;&#x6c;&#105;&#x63;&#101;&#x40;&#x6c;&#101;&#101;&#x74;&#x63;&#x6f;&#100;&#x65;&#46;&#99;&#x6f;&#x6d;</a>中， alice 是 本地名 ，而 leetcode.com 是 域名 。<br>如果在电子邮件地址的 本地名 部分中的某些字符之间添加句点（’.’），则发往那里的邮件将会转发到本地名中没有点的同一地址。请注意，此规则 不适用于域名 。</p><p>例如，”<a href="mailto:&#97;&#108;&#105;&#x63;&#101;&#46;&#x7a;&#64;&#108;&#101;&#x65;&#116;&#99;&#x6f;&#100;&#101;&#x2e;&#x63;&#111;&#109;">&#97;&#108;&#105;&#x63;&#101;&#46;&#x7a;&#64;&#108;&#101;&#x65;&#116;&#99;&#x6f;&#100;&#101;&#x2e;&#x63;&#111;&#109;</a>” 和 “<a href="mailto:&#97;&#x6c;&#x69;&#99;&#101;&#122;&#64;&#x6c;&#101;&#101;&#x74;&#x63;&#111;&#x64;&#x65;&#46;&#x63;&#x6f;&#109;">&#97;&#x6c;&#x69;&#99;&#101;&#122;&#64;&#x6c;&#101;&#101;&#x74;&#x63;&#111;&#x64;&#x65;&#46;&#x63;&#x6f;&#109;</a>” 会转发到同一电子邮件地址。<br>如果在 本地名 中添加加号（’+’），则会忽略第一个加号后面的所有内容。这允许过滤某些电子邮件。同样，此规则 不适用于域名 。</p><p>例如 <a href="mailto:&#109;&#46;&#x79;&#x2b;&#x6e;&#97;&#109;&#x65;&#64;&#101;&#x6d;&#97;&#x69;&#108;&#46;&#99;&#x6f;&#109;">&#109;&#46;&#x79;&#x2b;&#x6e;&#97;&#109;&#x65;&#64;&#101;&#x6d;&#97;&#x69;&#108;&#46;&#99;&#x6f;&#109;</a> 将转发到 <a href="mailto:&#109;&#121;&#64;&#x65;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#111;&#x6d;">&#109;&#121;&#64;&#x65;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#111;&#x6d;</a>。<br>可以同时使用这两个规则。</p><p>给你一个字符串数组 emails，我们会向每个 emails[i] 发送一封电子邮件。返回实际收到邮件的不同地址数目。</p><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：emails = [<span class="string">&quot;test.email+alex@leetcode.com&quot;</span>,<span class="string">&quot;test.e.mail+bob.cathy@leetcode.com&quot;</span>,<span class="string">&quot;testemail+david@lee.tcode.com&quot;</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：实际收到邮件的是 <span class="string">&quot;testemail@leetcode.com&quot;</span> 和 <span class="string">&quot;testemail@lee.tcode.com&quot;</span>。</span><br><span class="line"></span><br><span class="line">输入：emails = [<span class="string">&quot;a@leetcode.com&quot;</span>,<span class="string">&quot;b@leetcode.com&quot;</span>,<span class="string">&quot;c@leetcode.com&quot;</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numUniqueEmails</span><span class="params">(String[] emails)</span> &#123;</span><br><span class="line">        Set&lt;String&gt; emailSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String email : emails) &#123;</span><br><span class="line">            <span class="comment">//获取到&#x27;@&#x27;所处的位置</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> email.indexOf(<span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">            <span class="comment">//substring(0,i)获取&#x27;@&#x27;之前的字符串</span></span><br><span class="line">            <span class="comment">//然后根据&#x27;+&#x27;号分割，由此分割成两部分，需要的是第一部分，故有[0]</span></span><br><span class="line">            <span class="comment">//注意： . 、 $、 | 和 * 等转义字符，必须得加 \\。</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">local</span> <span class="operator">=</span> email.substring(<span class="number">0</span>, i).split(<span class="string">&quot;\\+&quot;</span>)[<span class="number">0</span>]; <span class="comment">// 去掉本地名第一个加号之后的部分</span></span><br><span class="line">            <span class="comment">//需要把&#x27;.&#x27;替换为空，即去掉&#x27;.&#x27;</span></span><br><span class="line">            local = local.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>); <span class="comment">// 去掉本地名中所有的句点</span></span><br><span class="line">            emailSet.add(local + email.substring(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> emailSet.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode_884-两句话中的不常见单词</title>
      <link href="/2023/03/29/f30bbee890a3/"/>
      <url>/2023/03/29/f30bbee890a3/</url>
      
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode.cn/problems/uncommon-words-from-two-sentences/">LeetCode_290-单词规律</a></p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p>哈希表， 字符串</p><h2 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h2><p>句子 是一串由空格分隔的单词。每个 单词 仅由小写字母组成。</p><p>如果某个单词在其中一个句子中恰好出现一次，在另一个句子中却 没有出现 ，那么这个单词就是 不常见的 。</p><p>给你两个 句子 s1 和 s2 ，返回所有 不常用单词 的列表。返回列表中单词可以按 任意顺序 组织。</p><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：s1 = <span class="string">&quot;this apple is sweet&quot;</span>, s2 = <span class="string">&quot;this apple is sour&quot;</span></span><br><span class="line">输出：[<span class="string">&quot;sweet&quot;</span>,<span class="string">&quot;sour&quot;</span>]</span><br><span class="line">    </span><br><span class="line">输入：s1 = <span class="string">&quot;apple apple&quot;</span>, s2 = <span class="string">&quot;banana&quot;</span></span><br><span class="line">输出：[<span class="string">&quot;banana&quot;</span>]</span><br><span class="line"></span><br><span class="line">最后执行的输入：</span><br><span class="line"><span class="string">&quot;s z z z s&quot;</span></span><br><span class="line"><span class="string">&quot;s z ejt&quot;</span></span><br><span class="line">    </span><br><span class="line">最后执行的输入：</span><br><span class="line"><span class="string">&quot;fd kss fd&quot;</span></span><br><span class="line"><span class="string">&quot;fd fd kss&quot;</span></span><br></pre></td></tr></table></figure><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String[] uncommonFromSentences(String s1, String s2) &#123;</span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        String[] str1 = s1.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        String[] str2 = s2.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        List&lt;String&gt; tmpList =<span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="comment">//不能直接创建数组，因为不知道输出的数组长度</span></span><br><span class="line">        <span class="comment">//如果像下面定义长度的话，会有多余的输出，如：[&quot;sweet&quot;,&quot;sour&quot;,&quot;null&quot;,&quot;null&quot;]</span></span><br><span class="line">        <span class="comment">// String[] res = new String[str1.length];</span></span><br><span class="line">        <span class="keyword">for</span>(String sa : str1) &#123;</span><br><span class="line">            map.put(sa, map.containsKey(sa)? map.get(sa)+<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//不能这里删除，如果后面存在就会报错，如那两个</span></span><br><span class="line">            <span class="comment">// if(map.get(sa) &gt; 1) &#123;</span></span><br><span class="line">            <span class="comment">//     map.remove(sa);</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str2.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(str2[i])) &#123;</span><br><span class="line">                <span class="comment">// map.remove(str2[i]);</span></span><br><span class="line">                <span class="comment">//不能减1，这样很难比较，如第一个最后的输入</span></span><br><span class="line">                map.put(str2[i], map.get(str2[i])+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(str2[i], <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为不能定义数组，j也就不需要了</span></span><br><span class="line">        <span class="comment">// int j = 0;</span></span><br><span class="line">        <span class="comment">//两种方法都可以</span></span><br><span class="line">        <span class="comment">// for(Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;</span></span><br><span class="line">        <span class="comment">//     if(entry.getValue() == 1) &#123;</span></span><br><span class="line">        <span class="comment">//         res[j] = entry.getKey();</span></span><br><span class="line">        <span class="comment">//         j++;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">for</span>(String key : map.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(key) == <span class="number">1</span>) &#123;</span><br><span class="line">               tmpList.add(key);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        String[] res = tmpList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[tmpList.size()]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode_496-下一个更大元素I</title>
      <link href="/2023/03/29/2bbb7778feb5/"/>
      <url>/2023/03/29/2bbb7778feb5/</url>
      
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode.cn/problems/next-greater-element-i/">LeetCode_496-下一个更大元素I</a></p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p>哈希表， 字符串</p><h2 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h2><p>nums1 中数字 x 的 下一个更大元素 是指 x 在 nums2 中对应位置 右侧 的 第一个 比 x 大的元素。</p><p>给你两个 没有重复元素 的数组 nums1 和 nums2 ，下标从 0 开始计数，其中nums1 是 nums2 的子集。</p><p>对于每个 0 &lt;&#x3D; i &lt; nums1.length ，找出满足 nums1[i] &#x3D;&#x3D; nums2[j] 的下标 j ，并且在 nums2 确定 nums2[j] 的 下一个更大元素 。如果不存在下一个更大元素，那么本次查询的答案是 -1 。</p><p>返回一个长度为 nums1.length 的数组 ans 作为答案，满足 ans[i] 是如上所述的 下一个更大元素 。</p><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>], nums2 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>].</span><br><span class="line">输出：[-<span class="number">1</span>,<span class="number">3</span>,-<span class="number">1</span>]</span><br><span class="line">解释：nums1 中每个值的下一个更大元素如下所述：</span><br><span class="line">- <span class="number">4</span> ，用加粗斜体标识，nums2 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>]。不存在下一个更大元素，所以答案是 -<span class="number">1</span> 。</span><br><span class="line">- <span class="number">1</span> ，用加粗斜体标识，nums2 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>]。下一个更大元素是 <span class="number">3</span> 。</span><br><span class="line">- <span class="number">2</span> ，用加粗斜体标识，nums2 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>]。不存在下一个更大元素，所以答案是 -<span class="number">1</span> 。</span><br><span class="line"></span><br><span class="line">输入：nums1 = [<span class="number">2</span>,<span class="number">4</span>], nums2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].</span><br><span class="line">输出：[<span class="number">3</span>,-<span class="number">1</span>]</span><br><span class="line">解释：nums1 中每个值的下一个更大元素如下所述：</span><br><span class="line">- <span class="number">2</span> ，用加粗斜体标识，nums2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]。下一个更大元素是 <span class="number">3</span> 。</span><br><span class="line">- <span class="number">4</span> ，用加粗斜体标识，nums2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]。不存在下一个更大元素，所以答案是 -<span class="number">1</span> 。</span><br></pre></td></tr></table></figure><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] nextGreaterElement(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="comment">//nums1 是 nums2 的子集</span></span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> nums2.length;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n1];</span><br><span class="line">        <span class="comment">//可以记录nums2中：将每一个数字作为key，位置下标为value</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>; m &lt; n2; m++) &#123;</span><br><span class="line">            map.put(nums2[m], m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历nums1，获取每一个数字</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n1; i++) &#123;</span><br><span class="line">            <span class="comment">//然后从map中获取该数字对应的下标（该下标对应的是nums2中该数字的下标）</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> map.get(nums1[i]);</span><br><span class="line">            <span class="comment">//做该判断是因为如果k为nums2的最后一个数字的话，下方的j=k+1就会越界</span></span><br><span class="line">            <span class="comment">//所以如果该数字如果为nums2的最后一个数字的话，name他一定没有比它大的下一个元素，返回-1。</span></span><br><span class="line">            <span class="keyword">if</span>(k == n2 - <span class="number">1</span>) ans[i] = -<span class="number">1</span>; </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> k + <span class="number">1</span>; j &lt; n2; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums2[j] &gt; nums2[k]) &#123;</span><br><span class="line">                    ans[i] = nums2[j];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j == n2 - <span class="number">1</span> &amp;&amp; nums2[j] &lt;= nums2[k]) &#123;</span><br><span class="line">                    ans[i] = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode_1002-查找公共字符</title>
      <link href="/2023/03/29/76234e815a1c/"/>
      <url>/2023/03/29/76234e815a1c/</url>
      
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode.cn/problems/find-common-characters/">LeetCode_1002-查找公共字符</a></p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p>哈希表， 字符串</p><h2 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h2><p>给你一个字符串数组 words ，请你找出所有在 words 的每个字符串中都出现的共用字符（ <strong>包括重复字符</strong>），并以数组形式返回。你可以按 <strong>任意顺序</strong> 返回答案。</p><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：words = [<span class="string">&quot;bella&quot;</span>,<span class="string">&quot;label&quot;</span>,<span class="string">&quot;roller&quot;</span>]</span><br><span class="line">输出：[<span class="string">&quot;e&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;l&quot;</span>]</span><br><span class="line">    </span><br><span class="line">输入：words = [<span class="string">&quot;cool&quot;</span>,<span class="string">&quot;lock&quot;</span>,<span class="string">&quot;cook&quot;</span>]</span><br><span class="line">输出：[<span class="string">&quot;c&quot;</span>,<span class="string">&quot;o&quot;</span>]</span><br><span class="line">    </span><br><span class="line">最后执行的输入：(代表通过了部分测试用例，执行该测试用例时失败了)</span><br><span class="line">[<span class="string">&quot;cool&quot;</span>,<span class="string">&quot;lock&quot;</span>,<span class="string">&quot;cook&quot;</span>]</span><br></pre></td></tr></table></figure><h2 id="代码：-写了蛮久，需要注意"><a href="#代码：-写了蛮久，需要注意" class="headerlink" title="代码：(写了蛮久，需要注意)"></a>代码：(写了蛮久，需要注意)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">commonChars</span><span class="params">(String[] words)</span> &#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//在这里定义j时，由于j一直递增，不会变为0，导致i循环只会执行一次，因此要把它放到i循环里面</span></span><br><span class="line"><span class="comment">//        int j = 0;</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; words.length) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            HashMap&lt;Character, Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(j &lt; words[i].length()) &#123;</span><br><span class="line">                <span class="type">Character</span> <span class="variable">ch</span> <span class="operator">=</span> words[i].charAt(j);</span><br><span class="line">                <span class="comment">//把第一个字符串的结果存起来，然后下一个字符串与其比较</span></span><br><span class="line">                <span class="comment">//得到相同的字符，再继续与下一个字符串比较......</span></span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>) &#123;</span><br><span class="line">                    tmp.put(ch, tmp.containsKey(ch) ? tmp.get(ch) + <span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(map.containsKey(ch)) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(tmp.containsKey(ch)) &#123;</span><br><span class="line">                            <span class="comment">//这两步是不能这样写的，因为当字符串为这样时：[&quot;cool&quot;,&quot;lock&quot;,&quot;cook&quot;]</span></span><br><span class="line">                            <span class="comment">//输出为[&quot;c&quot;, &quot;o&quot;, &quot;o&quot;]，而预期结果为[&quot;c&quot;, &quot;o&quot;]</span></span><br><span class="line">                        <span class="comment">//    int k = Math.min(map.get(ch), tmp.get(ch));</span></span><br><span class="line">                        <span class="comment">//    tmp.put(ch, k + 1);</span></span><br><span class="line">                            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> map.get(ch);</span><br><span class="line">                            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> tmp.get(ch);</span><br><span class="line">                            <span class="comment">//必须先判断，如果前面key的value值大于前面，才能加1</span></span><br><span class="line">                            <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">                                tmp.put(ch, b+<span class="number">1</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                tmp.put(ch, b);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            tmp.put(ch, <span class="number">1</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            map.clear();</span><br><span class="line">            map.putAll(tmp);</span><br><span class="line">            tmp.clear();</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//entrySet() 方法返回映射中包含的映射的 Set 视图。</span></span><br><span class="line">        <span class="comment">//entrySet() 方法可以与 for-each 循环一起使用，用来遍历迭代 HashMap 中每一个映射项。</span></span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Character, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>; m &lt; entry.getValue(); m++) &#123;</span><br><span class="line">                res.add(String.valueOf(entry.getKey()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode_389-找不同</title>
      <link href="/2023/03/29/79365b5a1808/"/>
      <url>/2023/03/29/79365b5a1808/</url>
      
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode.cn/problems/find-the-difference/">LeetCode_389-找不同</a></p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p>哈希表， 字符串</p><h2 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h2><p>给定两个字符串 <code>s</code> 和 <code>t</code> ，它们只包含小写字母。</p><p>字符串 <code>t</code> 由字符串 <code>s</code> 随机重排，然后在随机位置添加一个字母。</p><p>请找出在 <code>t</code> 中被添加的字母。</p><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;abcd&quot;</span>, t = <span class="string">&quot;abcde&quot;</span></span><br><span class="line">输出：<span class="string">&quot;e&quot;</span></span><br><span class="line">解释：<span class="string">&#x27;e&#x27;</span> 是那个被添加的字母。</span><br><span class="line"></span><br><span class="line">输入：s = <span class="string">&quot;&quot;</span>, t = <span class="string">&quot;y&quot;</span></span><br><span class="line">输出：<span class="string">&quot;y&quot;</span></span><br><span class="line"></span><br><span class="line">最后执行的输入：</span><br><span class="line"><span class="string">&quot;ymbgaraibkfmvocpizdydugvalagaivdbfsfbepeyccqfepzvtpyxtbadkhmwmoswrcxnargtlswqemafandgkmydtimuzvjwxvlfwlhvkrgcsithaqlcvrihrwqkpjdhgfgreqoxzfvhjzojhghf&quot;</span></span><br><span class="line"><span class="string">&quot;qhxepbshlrhoecdaodgpousbzfcqjxulatciapuftffahhlmxbufgjuxstfjvljybfxnenlacmjqoymvamphpxnolwijwcecgwbcjhgdybfffwoygikvoecdggplfohemfypxfsvdrseyhmvkoovx&quot;</span></span><br></pre></td></tr></table></figure><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">findTheDifference</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="comment">//定义一个哈希表</span></span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Character, Integer&gt;();</span><br><span class="line">        <span class="comment">//字符串长度有s.length(),【数组的话为nums.length】</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">Character</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="comment">//最开始时直接map.put(ch, 1),但这样会导致如果字符串中有重复的字符的话，会报错</span></span><br><span class="line">            map.put(ch,map.containsKey(ch)?map.get(ch)+<span class="number">1</span>:<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Character</span> <span class="variable">add</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &lt; t.length()) &#123;</span><br><span class="line">            <span class="type">Character</span> <span class="variable">ch</span> <span class="operator">=</span> t.charAt(j);</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(ch) &amp;&amp; map.get(ch) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                map.put(ch, map.get(ch)-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当key不存在或key的value值为负数是，即为添加的数</span></span><br><span class="line">            <span class="keyword">else</span> add = ch;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> add;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="官方的位运算（没想到）"><a href="#官方的位运算（没想到）" class="headerlink" title="官方的位运算（没想到）"></a>官方的<strong>位运算</strong>（没想到）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">findTheDifference</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">ans</span> <span class="operator">=</span> t.charAt(t.length()-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//异或运算</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            ans ^= s.charAt(i);</span><br><span class="line">            ans ^= t.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode_290--单词规律</title>
      <link href="/2023/03/29/277427764d99/"/>
      <url>/2023/03/29/277427764d99/</url>
      
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode.cn/problems/word-pattern/">LeetCode_290-单词规律</a></p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p>哈希表， 字符串</p><h2 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h2><p>给定一种规律 pattern 和一个字符串 s ，判断 s 是否遵循相同的规律。</p><p>这里的 遵循 指完全匹配，例如， pattern 里的每个字母和字符串 s 中的每个非空单词之间存在着双向连接的对应规律。</p><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: pattern = <span class="string">&quot;abba&quot;</span>, s = <span class="string">&quot;dog cat cat dog&quot;</span></span><br><span class="line">输出: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">输入:pattern = <span class="string">&quot;abba&quot;</span>, s = <span class="string">&quot;dog cat cat fish&quot;</span></span><br><span class="line">输出: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">输入: pattern = <span class="string">&quot;aaaa&quot;</span>, s = <span class="string">&quot;dog cat cat dog&quot;</span></span><br><span class="line">输出: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">wordPattern</span><span class="params">(String pattern, String s)</span> &#123;</span><br><span class="line">        <span class="comment">//定义两个map，来一对一的映射</span></span><br><span class="line">        HashMap&lt;Character, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        HashMap&lt;String, Character&gt; set = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        String[] strs = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="comment">//长度必须一致</span></span><br><span class="line">        <span class="keyword">if</span> (strs.length != pattern.length()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; pattern.length() &amp;&amp; j &lt; strs.length) &#123;</span><br><span class="line">            <span class="type">Character</span> <span class="variable">ch</span> <span class="operator">=</span> pattern.charAt(i);</span><br><span class="line">            <span class="comment">//下面两种是不存在的情况</span></span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(ch) &amp;&amp; !map.get(ch).equals(strs[j]))   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (set.containsKey(strs[j]) &amp;&amp; set.get(strs[j]) != ch) </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            map.put(ch, strs[j]);</span><br><span class="line">            set.put(strs[j], ch);</span><br><span class="line">            i++; j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/27/54f15610365d/"/>
      <url>/2023/03/27/54f15610365d/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
